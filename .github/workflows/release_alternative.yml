---
name: Release Basic
on:
  workflow_dispatch:
  push:
    tags:
      - v**

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Determine version
        id: version_id
        run: echo "value=$(git describe --always --tags --dirty)" >> $GITHUB_OUTPUT

      - name: Generate parser
        run: "./gen_parser.sh"

      - name: Build firmware for esp32
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: v5.3.1
          target: esp32
          command: python3 build.py esp32

      - name: Zip bins and tools for esp32
        run: "zip lizard_esp32.zip -@ < .github/zip_content.txt"

      - name: Save esp32 artifacts
        run: |
          cp build/lizard.bin lizard_esp32.bin
          cp lizard_esp32.zip lizard_esp32_temp.zip

      - name: Build firmware for esp32s3
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: v5.3.1
          target: esp32s3
          command: python3 build.py esp32s3 --clean

      - name: Zip bins and tools for esp32s3
        run: "zip lizard_esp32s3.zip -@ < .github/zip_content.txt"

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.version_id.outputs.value }} \
            --title "lizard ${{ steps.version_id.outputs.value }}" \
            --generate-notes

      - name: Upload esp32 binary
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp lizard_esp32.bin lizard_${{ steps.version_id.outputs.value }}_esp32.bin
          gh release upload ${{ steps.version_id.outputs.value }} lizard_${{ steps.version_id.outputs.value }}_esp32.bin

      - name: Upload esp32 zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp lizard_esp32_temp.zip lizard_firmware_and_devtools_${{ steps.version_id.outputs.value }}_esp32.zip
          gh release upload ${{ steps.version_id.outputs.value }} lizard_firmware_and_devtools_${{ steps.version_id.outputs.value }}_esp32.zip

      - name: Upload esp32s3 binary
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp build/lizard.bin lizard_${{ steps.version_id.outputs.value }}_esp32s3.bin
          gh release upload ${{ steps.version_id.outputs.value }} lizard_${{ steps.version_id.outputs.value }}_esp32s3.bin

      - name: Upload esp32s3 zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp lizard_esp32s3.zip lizard_firmware_and_devtools_${{ steps.version_id.outputs.value }}_esp32s3.zip
          gh release upload ${{ steps.version_id.outputs.value }} lizard_firmware_and_devtools_${{ steps.version_id.outputs.value }}_esp32s3.zip

  docs:
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: python3 -m pip install -r requirements.txt
      - name: Build docs
        run: mkdocs build -v
      - name: Deploy gh-pages
        uses: JamesIves/github-pages-deploy-action@v4.2.5
        with:
          branch: gh-pages
          folder: site
